import { useState, useRef, useEffect } from "react";
import { useLocation, useParams } from "react-router-dom";
import { useReactToPrint } from "react-to-print";
import html2pdf from 'html2pdf.js';
import "./PurchaseOrder.css";

const PurchaseOrder = () => {
  const { id } = useParams(); // ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ /receipt/po/:id route
  const documentRef = useRef();
  const location = useLocation();

  const [formData, setFormData] = useState({
    id: "",
    name: "",
    date: "",
    employeeName: "",
    employeePosition: "",
    department: "",
    section: "",
    detail: "",
    approver: "",
    purchaser: "",
    auditor: "",
    dateApproval: "",
    dateApproval2: "",
    dateApproval3: "",
    products: [],
    totalAmount: 0,
    discount: 0,
    vat: 7,
    netAmount: 0,
    payment: "",
    notes: "",
  });

  const formatDate = (date) => {
    if (!date) return "";
    const parsedDate = new Date(date);
    if (isNaN(parsedDate.getTime())) return "";
    return parsedDate.toLocaleDateString("en-GB", {
      day: "2-digit",
      month: "2-digit",
      year: "numeric",
    });
  };

  // üîÅ ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å backend ‡∏ï‡∏≤‡∏° id ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
  useEffect(() => {
    if (id) {
      const fetchData = async () => {
        const res = await fetch("http://localhost:3000/purchase-orders");
        const data = await res.json();
        const found = data.find((po) => String(po.id) === id);
        if (found) {
          setFormData({
            ...found,
            date: formatDate(found.date),
            dateApproval: formatDate(found.dateApproval),
            dateApproval2: formatDate(found.dateApproval2),
            dateApproval3: formatDate(found.dateApproval3),
          });
        }
      };
      fetchData();
    }
  }, [id]);

  // üîÅ ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å state ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
  useEffect(() => {
    const receiptData = location.state?.receiptData;
    if (receiptData) {
      const formatted = {
        ...receiptData,
        id: receiptData.id || Date.now(),
        date: formatDate(receiptData.date),
        dateApproval: formatDate(receiptData.dateApproval),
        dateApproval2: formatDate(receiptData.dateApproval2),
        dateApproval3: formatDate(receiptData.dateApproval3),
        products: Array.isArray(receiptData.products) ? receiptData.products : [],
      };
      setFormData(formatted);

      // üîÅ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      fetch("http://localhost:3000/purchase-orders", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(formatted),
      })
        .then((res) => {
          if (res.ok) {
            console.log("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å PO ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");
          } else {
            console.error("‚ùå ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å PO ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
          }
        })
        .catch((err) => {
          console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", err);
        });
    }
  }, [location.state]);

  const handlePrint = useReactToPrint({
    content: () => documentRef.current,
    documentTitle: "Purchase Order",
  });

  const generatePDF = () => {
    const element = document.getElementById('purchase-order-content');
    const opt = {
      margin: 0.5,
      filename: 'purchase_order.pdf',
      image: { type: 'jpeg', quality: 0.98 },
      html2canvas: { scale: 2 },
      jsPDF: { unit: 'in', format: 'a4', orientation: 'portrait' },
    };
    html2pdf().set(opt).from(element).save();
  };

  return (
    <div className="purchase-order-page">
      <div id="purchase-order-content" className="purchase-order-container" ref={documentRef}>
        <h2 className="purchase-order-title">‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</h2>
        <div className="purchase-order-header">
          <div className="header-right">
            <p>PO.ID: {formData.id}</p>
            <p>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {formData.date}</p>
          </div>
        </div>

        <div className="purchase-order-row">
          <div className="purchase-order-column"><span className="label">‡πÅ‡∏ú‡∏ô‡∏Å:</span> {formData.section}</div>
          <div className="purchase-order-column"><span className="label">‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô:</span> {formData.employeeName}</div>
          <div className="purchase-order-column"><span className="label">‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á:</span> {formData.department}</div>
          <div className="purchase-order-column"><span className="label">‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á:</span> {formData.detail}</div>
        </div>

        <table className="purchase-order-table">
          <thead>
            <tr>
              <th>‡∏•‡∏≥‡∏î‡∏±‡∏ö</th>
              <th>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</th>
              <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô</th>
              <th>‡∏´‡∏ô‡πà‡∏ß‡∏¢</th>
              <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô</th>
            </tr>
          </thead>
          <tbody>
            {formData.products.map((item, i) => (
              <tr key={i}>
                <td>{i + 1}</td>
                <td>{item.item}</td>
                <td>{item.quantity}</td>
                <td>{item.unit}</td>
                <td>{item.totalAmount}</td>
              </tr>
            ))}
            <tr><td colSpan="4">‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏á‡∏¥‡∏ô</td><td>{formData.totalAmount}</td></tr>
            <tr><td colSpan="4">‡∏†‡∏≤‡∏©‡∏µ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏° 7%</td><td>{formData.vat}</td></tr>
            <tr><td colSpan="4">‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î</td><td>{formData.discount}</td></tr>
            <tr><td colSpan="4">‡∏£‡∏ß‡∏°‡∏™‡∏∏‡∏ó‡∏ò‡∏¥</td><td>{formData.netAmount}</td></tr>
          </tbody>
        </table>

        <div className="purchase-order-remark">
          <span className="label">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</span>
          <p>{formData.payment}</p>
        </div>

        <div className="purchase-order-signatures">
          <div className="purchase-order-signature">
            <span className="label">‡∏ú‡∏π‡πâ‡∏°‡∏µ‡∏≠‡∏≥‡∏ô‡∏≤‡∏à</span>
            <span className="value">{formData.approver}</span>
            <div className="date">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {formData.dateApproval}</div>
          </div>
          <div className="purchase-order-signature">
            <span className="label">‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏ã‡∏∑‡πâ‡∏≠</span>
            <span className="value">{formData.purchaser}</span>
            <div className="date">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {formData.dateApproval2}</div>
          </div>
          <div className="purchase-order-signature">
            <span className="label">‡∏ú‡∏π‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö</span>
            <span className="value">{formData.auditor}</span>
            <div className="date">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {formData.dateApproval3}</div>
          </div>
        </div>
      </div>

      <div className="purchase-order-button-container">
        <button onClick={generatePDF} className="purchase-order-button">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô PDF</button>
      </div>
    </div>
  );
};

export default PurchaseOrder;
